/*
 * Copyright 2012-2019 MarkLogic Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

import java.util.concurrent.Executors

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'maven-publish'
    id 'com.marklogic.ml-development-tools' version '4.2.0'
    id 'jacoco'
    id 'application'
    id "org.sonarqube" version "2.8"
}
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

war {
    manifest {
        attributes("Implementation-Title": "Web Services and UI")
    }

}

bootWar {
    baseName "marklogic-explorer"
}

repositories {
    jcenter()
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'https://developer.marklogic.com/maven2/' }
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

group = 'com.marklogic'

ext.junitPlatformVersion = '1.3.1'
ext.junitJupiterVersion = '5.3.1'
mainClassName = 'com.marklogic.hub.explorer.WebApplication'

dependencies {
    compile 'javax.annotation:javax.annotation-api:1.3.2'
    compile group: 'org.springframework.boot', name: 'spring-boot', version: '2.1.7.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-core', version: '5.1.5.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-config', version: '5.1.5.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-web', version: '5.1.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-web', version: '5.1.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-webmvc', version: '5.1.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-websocket', version: '5.1.5.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.2.0.RELEASE'
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    // Optional Boot library - see https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
    compile("org.springframework.boot:spring-boot-devtools")

    compile 'com.marklogic:marklogic-client-api:5.0.1'
    compile 'com.marklogic:ml-javaclient-util:3.13.3'

    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.springframework.session:spring-session-jdbc'

    //spring boot test libs
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.7.RELEASE'
    testImplementation 'org.springframework.security:spring-security-test'
    // JUnit Jupiter API and TestEngine implementation
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

    testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.0.0'
}

task generateJobInfo(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask) {
    serviceDeclarationFile = 'src/main/resources/ml-modules/data-services/jobInfo/service.json'
}

task generateEntitySearchService(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask) {
    serviceDeclarationFile = 'src/main/resources/ml-modules/data-services/entitySearch/service.json'
}

configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    resolutionStrategy {
        force 'com.marklogic:marklogic-client-api:5.0.1'
    }
}

task startRest {
    doFirst {
        def executorService = Executors.newSingleThreadExecutor()
        executorService.submit({
            tasks.findMainClass.execute()
            pid = tasks.bootRun.execute()
        } as Runnable)
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events 'started', 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
    }
    finalizedBy jacocoTestReport
}

wrapper {
    gradleVersion = '5.4.1'
}

task stopBootrun {
    doLast {
        println("STOPPING Spring Boot")
        def connection = new URL("http://localhost:8080/shutdown").openConnection()
        connection.setRequestMethod("POST")
        connection.connect()
        println 'Shutting down application...'
        println connection.inputStream.text
    }
}

task cleanUi(type: Delete) {
    delete springBootUiPath + '/static', springBootUiPath + '/templates'
}

task copyUiAssets(type: Copy) {
    from reactUiPath + '/build'
    into springBootUiPath + '/static'
    exclude '*.html'
    dependsOn tasks.cleanUi
}

task copyUiFiles(type: Copy) {
    from reactUiPath + '/build'
    into springBootUiPath + '/templates'
    include '*.html'
    dependsOn tasks.copyUiAssets
}




jacocoTestReport {
    reports {
        xml.enabled true
    }
}
task applicationCodeCoverageReport(type:JacocoReport) {
    executionData run
    sourceSets sourceSets.main
}
sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property 'sonar.jacoco.reportPath', "${buildDir}/customJacocoReportDir/*"
        property 'sonar.junit.reportsPath', "${buildDir}/test-results/*"

    }

}
publishing {
    publications {
        mavenWeb(MavenPublication) {
            group = "com.marklogic"
            version = "${version}"
            from components.web

        }
    }
    repositories {
        maven {
            if (project.hasProperty("mavenUser")) {
                credentials {
                    username mavenUser
                    password mavenPassword
                }
            }
            url publishUrl
        }
    }
}

// Uncomment when 'reactUiPath' is fixed
//build.dependsOn copyUiFiles